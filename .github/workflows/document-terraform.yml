name: Terraform Documentation and Diagrams

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pull-requests: write
  pages: write
  deployments: write

jobs:
  terraform-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::468260221093:role/exp-net-fundamentals-deploy-gha-role
        aws-region: ca-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Generate Terraform Plan
      run: |
        terraform plan -out=tfplan
        terraform show -json tfplan > tfplan.json
    
    - name: Generate Draw.io Diagram and PNG Image
      run: |
        
        sudo apt-get update
        sudo apt-get install -y xvfb fonts-liberation libatk-bridge2.0-0 libatspi2.0-0 libgtk-3-0 libnspr4 libnss3 libx11-xcb1 libxss1 libxtst6 xdg-utils libasound2-dev
        
        wget -O /tmp/drawio.deb https://github.com/jgraph/drawio-desktop/releases/download/v21.8.2/drawio-amd64-21.8.2.deb
        sudo dpkg -i /tmp/drawio.deb || sudo apt-get -f install -y
  
        python << 'EOF'
        import json
        import xml.etree.ElementTree as ET
    
        with open('tfplan.json', 'r') as f:
          plan = json.load(f)
    
        mxfile = ET.Element('mxfile', host="Electron")
        diagram = ET.SubElement(mxfile, 'diagram', id="terraform-infrastructure", name="Infrastructure")
        mxGraphModel = ET.SubElement(diagram, 'mxGraphModel', dx="1426", dy="834", grid="1", gridSize="10", guides="1", tooltips="1", connect="1", arrows="1", fold="1", page="1", pageScale="1", pageWidth="827", pageHeight="1169", math="0", shadow="0")
        root = ET.SubElement(mxGraphModel, 'root')
    
        ET.SubElement(root, 'mxCell', id="0")
        ET.SubElement(root, 'mxCell', id="1", parent="0")
    
        cell_id = 2
        y_pos = 100
    
        if 'planned_values' in plan and 'root_module' in plan['planned_values']:
            resources = plan['planned_values']['root_module'].get('resources', [])
        
        for resource in resources:
            resource_type = resource.get('type', 'unknown')
            resource_name = resource.get('name', 'unnamed')
            
            cell = ET.SubElement(root, 'mxCell', 
                id=str(cell_id),
                value=f"{resource_type}\\n{resource_name}",
                style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;",
                vertex="1",
                parent="1"
            )
            
            ET.SubElement(cell, 'mxGeometry', 
                x="100", 
                y=str(y_pos), 
                width="120", 
                height="60", 
                **{"as": "geometry"}
            )
            
            cell_id += 1
            y_pos += 80

        tree = ET.ElementTree(mxfile)
        ET.indent(tree, space="  ", level=0)
        tree.write('infrastructure-diagram.drawio', encoding='utf-8', xml_declaration=True)
    
        print("Draw.io diagram generated successfully!")
        EOF

        echo "Converting Draw.io file to PNG..."
        xvfb-run --auto-servernum --server-args="-screen 0 1280x800x24" drawio --export --format png --border 20 --output infrastructure-diagram.png infrastructure-diagram.drawio

        echo "Diagram conversion complete. PNG file created."

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.4.1
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: "true"

    - name: Commit changes using GitHub API
      if: github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          function readFileAsBase64(filePath) {
            const content = fs.readFileSync(filePath);
            return Buffer.from(content).toString('base64');
          }

          const { data: refData } = await github.rest.git.getRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${context.ref.split('/').pop()}`
          });
          const currentSha = refData.object.sha;

          const { data: commitData } = await github.rest.git.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: currentSha
          });
          const currentTreeSha = commitData.tree.sha;

          const filesToCommit = ['README.md', 'infrastructure-diagram.png'];
          const fileBlobs = [];

          for (const file of filesToCommit) {
            try {
              if (fs.existsSync(file)) {
                const content = readFileAsBase64(file);
                const { data: blob } = await github.rest.git.createBlob({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  content: content,
                  encoding: 'base64'
                });

                fileBlobs.push({
                  path: file,
                  mode: '100644',
                  type: 'blob',
                  sha: blob.sha
                });
                console.log(`Created blob for ${file}`);
              } else {
                console.log(`File ${file} does not exist, skipping`);
              }
            } catch (error) {
              console.error(`Error processing ${file}: ${error.message}`);
            }
          }

          const { data: newTree } = await github.rest.git.createTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base_tree: currentTreeSha,
            tree: fileBlobs
          });

          const { data: newCommit } = await github.rest.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: 'docs: update terraform documentation and diagrams',
            tree: newTree.sha,
            parents: [currentSha],
            author: {
              name: 'GitHub Actions',
              email: 'actions@github.com',
              date: new Date().toISOString()
            }
          });

          await github.rest.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${context.ref.split('/').pop()}`,
            sha: newCommit.sha
          });
            
          console.log(`Successfully committed changes with commit SHA: ${newCommit.sha}`);

    - name: Upload Documentation and Diagrams
      uses: actions/upload-artifact@v4
      with:
        name: terraform-docs-and-diagrams
        path: infrastructure-diagram.png

  deploy-docs:
    needs: terraform-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: terraform-docs-and-diagrams
        path: ./docs
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs