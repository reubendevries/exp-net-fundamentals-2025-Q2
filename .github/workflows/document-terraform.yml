name: Terraform Documentation and Diagrams

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pull-requests: write
  pages: write
  deployments: write

jobs:
  terraform-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::468260221093:role/exp-net-fundamentals-deploy-gha-role
        aws-region: ca-central-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Generate Terraform Plan
      run: |
        terraform plan -out=tfplan
        terraform show -json tfplan > tfplan.json
    
    - name: Generate Infrastructure Diagram with Inframap
      run: |
        
        # Install Inframap
        wget -O inframap.tar.gz https://github.com/cycloidio/inframap/releases/download/v0.6.7/inframap-linux-amd64.tar.gz
        tar -xzf inframap.tar.gz
        chmod +x inframap-linux-amd64
        sudo mv inframap-linux-amd64 /usr/local/bin/inframap

        # Install graphviz
        sudo apt-get update
        sudo apt-get install -y graphviz

        # Check if tfplan.json exists and has content
        echo "Checking tfplan.json file:"
        ls -la tfplan.json

        # Try generating diagram with Inframap
        echo "Generating PNG diagram with Inframap:"
        cat tfplan.json | inframap generate --tfstate - | dot -Tpng > infrastructure-diagram.png || echo "Inframap generation failed with exit code $?"

        # Check if the file has content
        if [ ! -s infrastructure-diagram.png ]; then
          echo "Inframap produced empty diagram, falling back to terraform graph"
          terraform graph | dot -Tpng > infrastructure-diagram.png

          # If still empty, create a simple placeholder diagram
          if [ ! -s infrastructure-diagram.png ]; then
            echo "Terraform graph also failed, creating placeholder diagram"
            echo "digraph G { subgraph cluster_0 { label = \"Infrastructure\"; style=filled; color=lightgrey; node [style=filled,color=white]; \"No resources found in plan\"; } }" | dot -Tpng > infrastructure-diagram.png
          fi
        fi

        # Verify final output
        echo "Final diagram file size:"
        ls -la infrastructure-diagram.png

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.4.1
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: "true"

    - name: Commit changes using GitHub API
      if: github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Function to read file as base64
          function readFileAsBase64(filePath) {
            const content = fs.readFileSync(filePath);
            return Buffer.from(content).toString('base64');
          }
          
          // Get current commit SHA
          const { data: refData } = await github.rest.git.getRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${context.ref.split('/').pop()}`
          });
          const currentSha = refData.object.sha;
          
          // Get current tree
          const { data: commitData } = await github.rest.git.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: currentSha
          });
          const currentTreeSha = commitData.tree.sha;
          
          // Create blobs for each file
          const filesToCommit = ['README.md', 'infrastructure-diagram.png'];
          const fileBlobs = [];
          
          for (const file of filesToCommit) {
            try {
              if (fs.existsSync(file)) {
                const content = readFileAsBase64(file);
                const { data: blob } = await github.rest.git.createBlob({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  content: content,
                  encoding: 'base64'
                });
                
                fileBlobs.push({
                  path: file,
                  mode: '100644',
                  type: 'blob',
                  sha: blob.sha
                });
                console.log(`Created blob for ${file}`);
              } else {
                console.log(`File ${file} does not exist, skipping`);
              }
            } catch (error) {
              console.error(`Error processing ${file}: ${error.message}`);
            }
          }
          
          // Create new tree
          const { data: newTree } = await github.rest.git.createTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base_tree: currentTreeSha,
            tree: fileBlobs
          });
          
          // Create commit
          const { data: newCommit } = await github.rest.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: 'docs: update terraform documentation and diagrams',
            tree: newTree.sha,
            parents: [currentSha],
            author: {
              name: 'GitHub Actions',
              email: 'actions@github.com',
              date: new Date().toISOString()
            }
          });
            
          // Update reference
          await github.rest.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${context.ref.split('/').pop()}`,
            sha: newCommit.sha
          });
            
          console.log(`Successfully committed changes with commit SHA: ${newCommit.sha}`);

    - name: Upload Documentation and Diagrams
      uses: actions/upload-artifact@v4
      with:
        name: terraform-docs-and-diagrams
        path: infrastructure-diagram.png

  deploy-docs:
    needs: terraform-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: terraform-docs-and-diagrams
        path: ./docs
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs